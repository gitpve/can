/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
#include "canbus.h"

/* Header for class Interface_CanbusInterface */

#ifndef _Included_Interface_CanbusInterface
#define _Included_Interface_CanbusInterface
#ifdef __cplusplus
extern "C" {
#endif

struct JNI {
	jobject obj;
	jobject iparse;
	JavaVM* pVM;
} G_JniParam;

void CallBack(const char* str);

/**
 * Class:com_Interface_CanbusInterface
 * Method:changeAVM
 * Signature()v
 * new add 2015-06-15
 *
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_changeAVM(JNIEnv *env,jobject obj,jint index) {
	canbus_change_avm(index);
}


/**
 * ask for version
 */

JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_reqVersion(JNIEnv *env,jobject obj){
	canbus_req_version();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    openDevice
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_Interface_CanbusInterface_openDevice(
		JNIEnv * env, jobject obj) {
	canbus_interface_init(CallBack);
	return canbus_open_device();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    closeDevice
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_Interface_CanbusInterface_closeDevice(
		JNIEnv * env, jobject obj) {
	return canbus_close_device();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    setCallBack
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_setCallBack
(JNIEnv * env, jobject obj) {
	G_JniParam.obj = env->NewGlobalRef(obj);
	env->GetJavaVM(&G_JniParam.pVM);
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    resetCallBack
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_resetCallBack
(JNIEnv * env, jobject obj) {
	env->DeleteGlobalRef(obj);
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    startDevice
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_startDevice
(JNIEnv * env, jobject obj) {
	canbus_start_device();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    requestVersion
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_requestVersion
(JNIEnv * env, jobject obj) {
	canbus_request_version();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    requestVersion
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_dashboardShow
(JNIEnv * env, jobject obj, jbyteArray first, jbyteArray second) {
	canbus_dashboard_show((char*)env->GetByteArrayElements(first,NULL), (char*)env->GetByteArrayElements(second,NULL));
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    reportACK
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_reportACK
(JNIEnv * env, jobject obj) {
	canbus_report_ack();
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    postKey
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_postKey
(JNIEnv * env, jobject obj, jint key) {
	canbus_report_key(key);
}

/*
 * Class:     com_Interface_CanbusInterface
 * Method:    reportNACK
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_reportNACK
(JNIEnv * env, jobject obj) {
	canbus_report_nack();
}
JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_setTime(JNIEnv * env, jobject obj, jint hour_format ,jint hour ,jint minute) {
	canbus_set_time(hour_format ,hour ,minute);
}

JNIEXPORT void JNICALL Java_com_Interface_CanbusInterface_setFreq(JNIEnv * env, jobject obj, jint band ,jint freq) {
	canbus_radio_update(band, freq);
}

void CallBack(const char* str) {
	JNIEnv* env; //�߳���أ�ֻ���ڱ����õ��߳���ʹ��
	G_JniParam.pVM->AttachCurrentThread(&env, 0); //��jvm���ص���ǰ�߳�
	jclass cls = env->GetObjectClass(G_JniParam.obj);

	if (cls == 0) {
		__android_log_print(ANDROID_LOG_INFO, "JNIMsg", "cls == 0\n", __func__);
		return;
	}

	//jmethodID(JNICALL *GetMethodID)(JNIENV *env,jclass clazz,const char *name,const char *sig);
	//clazz���java�࣬name����Ա��������֣�sig��?��ķ���ֵ

	jmethodID methodID = env->GetMethodID(cls, "callBack",
			"(Ljava/lang/String;)V");

	if (methodID == 0) {
		__android_log_print(ANDROID_LOG_INFO, "JNIMsg", "methodID == 0\n");
		return;
	}
	jstring jstr = env->NewStringUTF(str);
	env->CallVoidMethod(G_JniParam.obj, methodID, jstr);
	G_JniParam.pVM->DetachCurrentThread(); //��jvm�ӵ�ǰ�̰߳���
	__android_log_print(ANDROID_LOG_INFO, "JNIMsg",
			"%s() end and Img transfer stop\n", __func__);
}

#ifdef __cplusplus
}
#endif
#endif
